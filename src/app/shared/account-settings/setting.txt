'use client';
import dynamic from 'next/dynamic';
import toast from 'react-hot-toast';
import { SubmitHandler, Controller } from 'react-hook-form';
import { PiClock, PiEnvelopeSimple } from 'react-icons/pi';
import { Form } from '@ui/form';
import { Loader, Text, Input } from 'rizzui';
import FormGroup from '@/app/shared/form-group';
import FormFooter from '@components/form-footer';
import {
  defaultValues,
  personalInfoFormSchema,
  PersonalInfoFormTypes,
} from '@/validators/personal-info.schema';
import UploadZone from '@ui/file-upload/upload-zone';
import { countries, roles, timezones } from '@/data/forms/my-details';
import AvatarUpload from '@ui/file-upload/avatar-upload';
import { useEffect, useState } from 'react';
import axiosInstance from '@/axiosInstance'; // Adjust your import for axiosInstance
import { func } from 'prop-types';
import { useForm } from 'react-hook-form';
import { Button} from "rizzui"






interface Account {
  id: number;
  name: string;
  created_date: string;
  is_active: boolean;
}


interface User {
  id: number;
  name: string;
  email: string;
  contact: string;
  is_active: boolean;
  created_at: string;
  account: number;
}

const ProfileSettingsView = () => {
  const [accounts, setAccounts] = useState<Account[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [isEditable, setIsEditable] = useState<boolean>(false);

  // Form states
  const [formAccounts, setFormAccounts] = useState<Account[]>([]);
  const [formUsers, setFormUsers] = useState<User[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axiosInstance.get ("http://localhost:9000/users/accounts_users/")
        setAccounts(response.data.accounts);
        setUsers(response.data.users);

        // Initialize form fields with the fetched data
        setFormAccounts(response.data.accounts);
        setFormUsers(response.data.users);

        setLoading(false);
      } catch (error) {
        setError('Failed to fetch data');
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleEdit = () => {
    setIsEditable(true);
  };

  const handleSave = () => {
    // Perform API call to save the updated data (optional)
    setIsEditable(false);
    // Here you would send the `formAccounts` and `formUsers` to the backend for saving

    // Example: axios.post('/save-endpoint', { accounts: formAccounts, users: formUsers });
    console.log('Saving data:', formAccounts, formUsers);
  };

  const handleInputChange = (index: number, field: string, value: string, type: 'account' | 'user') => {
    if (type === 'account') {
      const updatedAccounts = [...formAccounts];
      updatedAccounts[index] = { ...updatedAccounts[index], [field]: value };
      setFormAccounts(updatedAccounts);
    } else {
      const updatedUsers = [...formUsers];
      updatedUsers[index] = { ...updatedUsers[index], [field]: value };
      setFormUsers(updatedUsers);
    }
  };

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>{error}</p>;
  }

  return (

    <div >

    <div className="">
      <>


      {formUsers.map((user, index) => (
        <div key={user.id} className="mb-4">
          <Input
            type="text"
            label="ID"
            value={user.id}
            disabled
            variant="outline"
            size="md"
            rounded="md"
            className="mb-2"
          />
          <Input
            type="text"
            label="Name"
            value={user.name}
            onChange={(e) => handleInputChange(index, 'name', e.target.value, 'user')}
            disabled={!isEditable}
            variant="outline"
            size="md"
            rounded="md"
            placeholder="Enter user name"
            className="mb-2"
          />
          <Input
            type="email"
            label="Email"
            value={user.email}
            onChange={(e) => handleInputChange(index, 'email', e.target.value, 'user')}
            disabled={!isEditable}
            variant="outline"
            size="md"
            rounded="md"
            placeholder="Enter user email"
            className="mb-2"
          />
          <Input
            type="text"
            label="Contact"
            value={user.contact}
            onChange={(e) => handleInputChange(index, 'contact', e.target.value, 'user')}
            disabled={!isEditable}
            variant="outline"
            size="md"
            rounded="md"
            placeholder="Enter contact number"
            className="mb-2"
          />
          <Input
            type="text"
            label="Active"
            value={user.is_active ? 'Yes' : 'No'}
            disabled
            variant="outline"
            size="md"
            rounded="md"
            className="mb-2"
          />
          <Input
            type="text"
            label="Account ID"
            value={user.account}
            disabled
            variant="outline"
            size="md"
            rounded="md"
            className="mb-2"
          />
          <Input
            type="text"
            label="Created At"
            value={new Date(user.created_at).toLocaleString()}
            disabled
            variant="outline"
            size="md"
            rounded="md"
            className="mb-2"
          />
        </div>
      ))}

      <div className="footer">
        {!isEditable ? (
          <Button onClick={handleEdit}>
            Edit
          </Button>
        ) : (
          <Button onClick={handleSave} >
            Save
          </Button>
        )}
      </div>
      </>
    </div>
    </div>
  );
};





export default ProfileSettingsView;














